=====[ ТЕКСТОВЫЙ ПАРСЕР ]=====

Описание:
	Утилита собирает информацию из текста, хранимую в специальной структуре построения. Текст рассматривается на наличие лексем начала блока данных. Каждый кусок данных состоит из ключа и значения. Ключом является текст не разделенный пробелами. Значением является любой текст, не содержащий в себе лексемы разделения данных. Данные разделяются лексемами разделения данных. Блок данных оканчивается концом текста или лексемой конца данных. Результатом парсера является хэш, содержащий пары ключа-символа и значения-строки. Текст может содержать любое количество блоков данных.

Пример:
	Текст:
	"Этот объект крайне токсиичен
	<item> toxic_damage 130 <+> toxic_time 4 <end>
	Должна проигроваться анимация блесток
	<item> animation_id 4"
	
	Результат:
	{:toxic_damage=>"130", :toxic_time=>"4", :animation_id=>"4"}

Локация: 
	Amphicore::TextParser

Интерфейс:
	create_parsekit(строка1, строка2, строка3, целое): набор_лексем
	Создание набора лексем для парсинга блоков данных
		строка1 - лексема начала блока данных
		строка2 - лексема резделения данных
		строка3 - лексема конца данных
		целое - чувствительность парсера к регистру
	
	parse_text(строка1, набор_лексем): хэш
	Разбор текста с помощью набора лексем
		строка1 - разбираемый текст
		набор_лексем - используемый набор лексем
		
	get_note(объект): хэш
	Разбор записки предмета с помощью заранее созданного набора лексем для заметок
		объект - разбираемый объект
		
	get_event(объект): хэш
	Разбор комка комментариев с помощью заранее созданного набора лексем для событий
		объект - разбираемое событие

Настройки:
	Лексемы набора лексем для заметок
	TEXT_NOTE_PARSER = [строка1, строка2, строка3]

	Лексемы набора лексем для событий
	TEXT_EVENT_PARSER = [строка1, строка2, строка3]

	Лексемы набора лексем для страниц событий
	TEXT_EVENT_PAGE_PARSER = [строка1, строка2, строка3]
	*
	строка1 - лексема начала блока данных
	строка2	- лексема разделения данных
	строка3 - лексема конца блока данных
	
	Параметр чувствительности парсера к регистру
	TEXT_PARSER_CASE = 0|1
	
=====[ СЕРИАЛИЗАЦИЯ ]=====

Описание:
	Утилита регистрирует сериализируемые глобальные объекты, которые создаются, сохранаются и загружаются автоматический. Созданные объекты хранятся в глобальном пространстве.

Пример:
	Amphicore.serialize("game_hash", Hash)
	...
	$game_hash[:key] = "value"
	
Локация: 
	Amphicore

Интерфейс:
	serialize(строка, класс)
	регестрирует класс для сериализации
		строка - имя глобального сериализуемого объекта
		класс - класс сериализируемого объекта